[{"id":0,"title":"组件总览","content":"#","routePath":"/charts/overview","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Button","content":"# Button\n\n#### 结构\n\n#### 用法\n```tsx iframe\nimport { Button } from \"solarx\";\nfunction App() {\n  return         <Button label=\"12\">111</Button>\n}\nexport default App;\n```\n\n## API\n\n\n  ### Button\n\n  \n  |Property|Description|Type|Default Value|\n|:---:|:---:|:---:|:---:|\n  |disabled|Whether to disable the button|`boolean`|`-`|\n|size|Type of Button|`\"mini\" \\| \"small\" \\| \"default\" \\| \"large\"`|`'default'`|\n    ","routePath":"/components/base/button","lang":"","toc":[{"text":"结构","id":"结构","depth":4,"charIndex":2},{"text":"用法","id":"用法","depth":4,"charIndex":7},{"text":"API","id":"api","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"布局","content":"#","routePath":"/components/layout/container","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"组件总览","content":"#","routePath":"/components/overview","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"动画","content":"#","routePath":"/guides/customization/animation","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"断点","content":"#","routePath":"/guides/customization/breakpoints","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"颜色","content":"#","routePath":"/guides/customization/colors","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"夜间模式","content":"#","routePath":"/guides/customization/dark-mode","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"布局","content":"#","routePath":"/guides/customization/layout","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"覆盖样式","content":"#","routePath":"/guides/customization/override","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"概述","content":"#","routePath":"/guides/customization/overview","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"主题","content":"#","routePath":"/guides/customization/theme","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"代币","content":"#","routePath":"/guides/customization/tokens","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"Next.js","content":"#","routePath":"/guides/framework/next","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"Vite","content":"#","routePath":"/guides/framework/vite","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"无障碍","content":"#","routePath":"/guides/overview/accessibility","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"浏览器支持","content":"#\n\nSolarx 基于现代化 CSS 框架 Panda，Panda CSS 采用现代 CSS 功能构建，并使用 PostCSS 添加对旧版浏览器的支持。\n\nSolarx 支持主流浏览器的最新、稳定版本，支持以下功能：\n\n * CSS 变量\n * CSS 层叠层\n * 现代选择器比如：:where() 或者 :is()\n\n\n浏览器列表#\n\n根据上述标准，支持以下浏览器：\n\n\n\n\nPolyfills#\n\n如果您需要支持旧版浏览器，您可以在 PostCSS 配置中使用以下 polyfill：\n\n * autoprefixer: 使用来自Can I Use 的值将供应商前缀添加到 CSS 规则。\n * postcss-cascade-layers: 添加对 CSS 级联层的支持。\n\n以下是在 postcss.config.js 中使用这些 polyfill 的文件示例：\n\n","routePath":"/guides/overview/browser-support","lang":"","toc":[{"text":"浏览器列表","id":"浏览器列表","depth":2,"charIndex":162},{"text":"Polyfills","id":"polyfills","depth":2,"charIndex":190}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"为 Solarx 做贡献","content":"#\n\n感谢您有兴趣为 Solarx 💖 做出贡献，您太棒了！\n\n\n概述#\n\n以下是一些可以帮助改进 Solarx 的方法\n\n * 改进文档：添加新的演示、修复拼写错误或添加缺失的信息。\n * 添加新的演示：向网站和故事书添加新的组件演示。提交 PR 以apps/compositions/src/examples\n * 修复错误：报告错误、修复错误或添加缺失的功能。\n * 贡献代码：通过打开 Github 讨论来提出新功能，或者找到现有的错误来进行处理。\n * 改进代码：改进代码、修复错误或添加缺失的功能。\n\nINFO\n\n我们欢迎一切贡献，无论大小。","routePath":"/guides/overview/contributing","lang":"","toc":[{"text":"概述","id":"概述","depth":2,"charIndex":33}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"设计准则","content":"#\n\nSolarxUI 的开发遵循了一系列特定的设计和 API\n原则。这些原则是我们组件库的基础，在确保我们提供的组件的效率、有效性和用户友好性方面发挥着至关重要的作用。\n\n\n#\n\n简单易用#\n\n在 Solarx，我们坚信提供简洁直观的组件至关重要，我们的设计流程以用户为中心，确保即使开发人员的专业水平差强人意，我们都能提供易于理解、配置和实现的工具。\n\n模块化设计#\n\nSolarx 中的每个组件都被设计为独立模块，这种模块化方法允许开发者只导入和使用他们需要的部分，从而打造更轻量级的应用程序并加快加载速度。\n\n定制化和灵活性#\n\nSolarx 的设计核心是以高度可定制化为核心，无论是主题还是样式覆盖，我们都为开发者提供对组件美观度的全面控制。\n\n一致的 API#\n\nSolarx 在所有组件中保持一致的 API，确保通用属性在不同组件中功能一致，让开发者能够预测组件行为，从而降低学习难度。\n\n组件插槽#\n\n为了提供最大的灵活性，许多组件都具有slots，允许开发者在组件的特定区域注入自定义样式或内容。每个插槽都可以单独设置样式，从而可以精细地控制组件的外观和行为。\n\n通过这些原则，我们致力于让 Solarx 成为一款高效、便捷、易用的工具供开发者使用。随着我们不断扩展和增强\nSolarx，这些指导原则仍将是我们设计和开发流程的核心。","routePath":"/guides/overview/design-principles","lang":"","toc":[{"text":"","id":"","depth":2,"charIndex":87},{"text":"简单易用","id":"简单易用","depth":4,"charIndex":90},{"text":"模块化设计","id":"模块化设计","depth":4,"charIndex":178},{"text":"定制化和灵活性","id":"定制化和灵活性","depth":4,"charIndex":258},{"text":"一致的 API","id":"一致的-api","depth":4,"charIndex":327},{"text":"组件插槽","id":"组件插槽","depth":4,"charIndex":401}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"安装","content":"#\n\n如何在你的项目中安装和设置 Solarx\n\n::: detail React 16.9 或更高版本 Motion 12.9.4 或更高版本 :::\n\n框架指南#\n\nSolarx 可兼容您常用的框架。我们整理了这些框架的分步指南\n\n编写中...\n\n全局安装#\n\n开始使用 Solarx 最简单的方法是使用全局安装，这意味着所有组件都从单个包中导入。\n\n按照以下步骤安装所有 Solarx 组件：\n\n正在编写...","routePath":"/guides/overview/install","lang":"","toc":[{"text":"框架指南","id":"框架指南","depth":4,"charIndex":77},{"text":"全局安装","id":"全局安装","depth":4,"charIndex":125}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"介绍","content":"#\n\nSolarx 是一个 React 的 UI 库，可以帮助你构建美观且易于访问的用户界面，它基于 Tailwind CSS 和\nMotion，并包含一组实用的工具函数。\n\n我为什么要使用 Solarx？#\n\n如果您符合以下条件，Solarx 就适合您：\n\n * 厌倦了重复编写数千个类名\n * 想要更易读、更易于维护的代码\n * 需要用更少的代码更快地设计界面\n * 希望跨端拥有一致的设计系统\n * 希望使用标准 UI 部件，而无需对每个细节做出设计决策\n * 想要黑暗模式和轻松可覆写的主题\n * 想要使用基于真实世界 UI 设计原则的设计系统\n * 想要同时实现开发速度和定制化\n\n哲学#\n\n我个人认为，优秀的设计能够为软件带来巨大的价值。它是我们和互联网陌生用户之间建立信任的主要方法之一。信任对任何业务都至关重要，因为它是用户掏钱成为客户之前首先要\n评估的因素。\n\n像我们自己会想的那样，用户可能也会问自己的一些问题可能是：\n\n“这家公司靠谱吗？” “谁在使用他们的软件和服务？” “我可以把我的个人数据托付给他们吗？”\n\n而糟糕的设计会给团队带来不好的印象，它会给人留下一种懒惰、未完成的、不稳定的印象，\n\n这向用户传递一个信息就是：团队并不关心用户体验！\n\n而好的设计说明背后的团队很用心，我们也会本能的认为未来他们应该会有好的发展，会持续迭代，投入心血。\n\n这让我想到“如果他们如此关心这些微小的细节，他们一定非常关心公司的其他事情，包括他们的客户！”。\n\n一个很好的例子就是 https://snappify.com/ 首页，我第一次遇到它是两年前，当时只是简单的美化展示一下代码块，\n\n我甚至不需要尝试这个产品就可以知道它一定很好。\n\n致谢#\n\nSolarx 的开发正是得益于这些令人惊叹的项目的启发和想法。\n\n * MUI - CSS in JS 赛道完善的React组件库先驱\n * Ant Design - 国内中后台组件设计的引领者\n * Stitches - 启发了 CSS 原语和变体API\n * Tailwind CSS - 启发了 JIT 编译和实用原子类\n * Vuesax - 独具一格的设计和组件思路","routePath":"/guides/overview/introduction","lang":"","toc":[{"text":"我为什么要使用 Solarx？","id":"我为什么要使用-solarx","depth":4,"charIndex":87},{"text":"哲学","id":"哲学","depth":4,"charIndex":295},{"text":"致谢","id":"致谢","depth":4,"charIndex":729}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"路线图","content":"#\n\n * 阶段一：基础搭建（2周）\n\n完成设计系统层架构\n\n实现5个核心原子组件\n\n * 阶段二：体系完善（3周）\n\n开发复合组件层基础设施\n\n建立文档系统框架\n\n * 阶段三：业务适配（持续）\n\n按业务需求扩展组件\n\n每月进行架构评审\n\n * 阶段四：效能提升（1周/季度）\n\n优化构建流程\n\n更新设计系统规范","routePath":"/guides/overview/roadmap","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"服务端渲染","content":"#\n\n正在编写...","routePath":"/guides/overview/ssr","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"Markdown & MDX","content":"#\n\nRspress supports not only Markdown but also MDX, a powerful way to develop\ncontent.\n\n\nMarkdown#\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n\n\n\nUse component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n\n\n\nFront matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\n\n\nCustom container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode block#\n\n\nBasic usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\n\n\nShow line numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\n\n\n\nWrap code#\n\nIf you want to wrap long code line by default, you can enable the\ndefaultWrapCode option in the config file:\n\n\n\n\nLine highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:","routePath":"/utils/","lang":"","toc":[{"text":"Markdown","id":"markdown","depth":2,"charIndex":88},{"text":"Use component","id":"use-component","depth":2,"charIndex":198},{"text":"Front matter","id":"front-matter","depth":2,"charIndex":336},{"text":"Custom container","id":"custom-container","depth":2,"charIndex":767},{"text":"Code block","id":"code-block","depth":2,"charIndex":1190},{"text":"Basic usage","id":"basic-usage","depth":3,"charIndex":1204},{"text":"Show line numbers","id":"show-line-numbers","depth":3,"charIndex":1332},{"text":"Wrap code","id":"wrap-code","depth":3,"charIndex":1455},{"text":"Line highlighting","id":"line-highlighting","depth":3,"charIndex":1580},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":1712}],"domain":"","frontmatter":{},"version":""}]